import { Page, expect } from "@playwright/test";
import users from "../data/users.json";
import { selectors } from "./selectors";

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏–Ω–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @param page - –æ–±—ä–µ–∫—Ç Playwright
 * @param role - —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ("Admin" | "User")
 */
export async function login(page: Page, role: "Admin" | "User") {
  const user = users.find((u) => u.role === role);
  if (!user) throw new Error(`‚ùå User with role ${role} not found`);

  console.log(`üîπ Logging in as ${role}...`);

  await page.goto(process.env.BASE_URL || "https://animated-gingersnap-8cf7f2.netlify.app/");
  await page.getByRole(selectors.usernameInput.role, { name: selectors.usernameInput.name }).fill(user.email);
  await page.getByRole(selectors.passwordInput.role, { name: selectors.passwordInput.name }).fill(user.password);
  await page.getByRole(selectors.signInButton.role, { name: selectors.signInButton.name }).click();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
  await expect(page.getByRole(selectors.mainHeading.role)).toBeVisible({ timeout: 5000 });
  console.log(`‚úÖ Successfully logged in as ${role}`);
}

/**
 * –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
 * @param page - –æ–±—ä–µ–∫—Ç Playwright
 * @param category - –∫–∞—Ç–µ–≥–æ—Ä–∏—è ("Web Application" | "Mobile Application")
 */
export async function navigateToTab(page: Page, category: "Web Application" | "Mobile Application") {
  const tabSelector = category === "Web Application" ? selectors.webAppTab : selectors.mobileAppTab;
  await page.getByRole(tabSelector.role, { name: tabSelector.name }).click();
  console.log(`üìå Navigated to tab: ${category}`);
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω—É–∂–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ —Å –Ω—É–∂–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
 * @param page - –æ–±—ä–µ–∫—Ç Playwright
 * @param task - –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
 * @param column - –∫–æ–ª–æ–Ω–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∑–∞–¥–∞—á–∞
 * @param tags - –æ–∂–∏–¥–∞–µ–º—ã–µ —Ç–µ–≥–∏
 */
export async function verifyTask(page: Page, task: string, column: string, tags: string[]) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ —Å –∑–∞–¥–∞—á–∞–º–∏ –≤–∏–¥–Ω–∞
  await expect(page.getByRole("heading", { name: column })).toBeVisible();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const taskLocator = page.getByRole("heading", { name: task });
  await expect(taskLocator).toBeVisible();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–≥–∏ –∑–∞–¥–∞—á–∏
  for (const tag of tags) {
    const tagLocator = page.locator(`//span[contains(text(), "${tag}")]`).first();
    await expect(tagLocator).toBeVisible();
  }

  console.log(`‚úÖ Verified task: "${task}" in column: "${column}" with tags: ${tags.join(", ")}`);
}
